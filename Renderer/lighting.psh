struct PS_INPUT
{
    float4 _ : SV_POSITION; // this is the position of pixel. It is unused: we use pos passed through TEXCOORD0 for lighting calculation
    float4 color : COLOR0;
    float3 pos : TEXCOORD0;
    float3 normal : TEXCOORD1;
};

cbuffer WorldConstants : register(b0)
{
    float4x4 world;  // aka post_transform           -- unused --
    float4x4 view;   // camera's view * projection   -- unused --
    float3   eye;    // camera's eye
};

cbuffer LightingConstants : register(b2)
{
    float4   direct_col;  // directional light color
    float4   point_col;   // point light color
    float4   ambient_col; // ambient light color
    float3   direct_vec;  // directional light vector
    float    diff_coef;   // diffuse component coefficient
    float3   point_pos;   // point light position
    float    spec_coef;   // specular component coefficient
    float3   atten_coefs; // attenuation coeffs (a, b, c)
    float    spec_factor; // specular factor (f)
};

float4 directional_light(const float3 pos, const float3 normal, const float3 v)
{
    float cos_theta = dot(direct_vec, normal);

    // -- diffuse --

    float diff = diff_coef * cos_theta;

    // -- specular --

    // calculating vector r = 2*(l, n)*n - l, where l is direction to light
    float3 r = 2*cos_theta*normal - direct_vec;
    float cos_phi = max(dot(r, v), 0);
    float spec = spec_coef * pow(cos_phi, spec_factor);

    return direct_col*(max(diff, 0) + max(spec, 0));
}

float4 point_light(const float3 pos, const float3 normal, const float3 v)
{
    float3 light_vec = point_pos - pos;
    float dist = length(light_vec);
    light_vec = normalize(light_vec); // normalize

    float atten = 1/(atten_coefs.x + atten_coefs.y*dist + atten_coefs.z*dist*dist);

    float cos_theta = dot(light_vec, normal);

    // -- diffuse --

    float diff = diff_coef * cos_theta;

    // -- specular --

    // calculating vector r = 2*(l, n)*n - l, where l is direction to light
    float3 r = 2*cos_theta*normal - light_vec;
    float cos_phi = max(dot(r, v), 0);
    float spec = spec_coef * pow(cos_phi, spec_factor);

    return point_col* atten* (max(diff, 0) + max(spec, 0));
}

float4 light(const float3 pos, const float3 normal)
{
    // calculating normalized vector v (from vertex to eye)
    float3 v = normalize(eye - pos);

    return directional_light(pos, normal, v)
           + point_light(pos, normal, v)
           + ambient_col;
}

float4 main(const PS_INPUT src) : SV_TARGET
{
    return src.color*light(src.pos, src.normal);
}
